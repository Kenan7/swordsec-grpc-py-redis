# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import users_pb2 as users__pb2


class UsersStub(object):
    """TODO -> convert this to Client Stream.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendUserInfo = channel.unary_unary(
                '/Users/SendUserInfo',
                request_serializer=users__pb2.UserRequest.SerializeToString,
                response_deserializer=users__pb2.UserResponse.FromString,
                )
        self.SendUserInfoClientStream = channel.stream_unary(
                '/Users/SendUserInfoClientStream',
                request_serializer=users__pb2.UserRequest.SerializeToString,
                response_deserializer=users__pb2.UserResponse.FromString,
                )


class UsersServicer(object):
    """TODO -> convert this to Client Stream.
    """

    def SendUserInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendUserInfoClientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendUserInfo,
                    request_deserializer=users__pb2.UserRequest.FromString,
                    response_serializer=users__pb2.UserResponse.SerializeToString,
            ),
            'SendUserInfoClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.SendUserInfoClientStream,
                    request_deserializer=users__pb2.UserRequest.FromString,
                    response_serializer=users__pb2.UserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Users(object):
    """TODO -> convert this to Client Stream.
    """

    @staticmethod
    def SendUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Users/SendUserInfo',
            users__pb2.UserRequest.SerializeToString,
            users__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendUserInfoClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Users/SendUserInfoClientStream',
            users__pb2.UserRequest.SerializeToString,
            users__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
